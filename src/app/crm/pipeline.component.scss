@import 'theme/shared-classes';
@import 'theme/style-guide';
// The arrows are implemented using CSS arrows. Since a bordered arrow needs to use both the
// :before and :after pseudo-elements, an additional container is needed so that two arrows can
// be added.
$arrow-width: 8px;
@mixin arrow-left($background-color, $border-color) {
  padding-left: 2 * $arrow-width;
  position: relative;
  > * {
    padding-right: 2 * $arrow-width;
  }
  &:after,
  &:before {
    border: solid transparent;
    content: ' ';
    height: 0;
    left: 1px;
    position: absolute;
    pointer-events: none;
    top: 50%;
    width: 0;
  }
  &:after {
    border-color: rgba($background-color, 0);
    border-bottom-color: $background-color;
    border-right-color: $background-color;
    border-top-color: $background-color;
    border-width: (2 * $arrow-width) $arrow-width;
    margin-top: -(2 * $arrow-width);
  }
  &:before {
    border-color: rgba($border-color, 0);
    border-bottom-color: $border-color;
    border-right-color: $border-color;
    border-top-color: $border-color;
    border-width: (2 * $arrow-width + 1px) $arrow-width;
    margin-left: -1px;
    margin-top: -(2 * $arrow-width + 1px);
  }
}

@mixin arrow-right($background-color, $border-color) {
  margin-right: $arrow-width + 1px;
  padding-left: $arrow-width + 1px;
  position: relative;
  &:after,
  &:before {
    border: solid transparent;
    content: ' ';
    height: 0;
    left: 100%;
    position: absolute;
    pointer-events: none;
    top: 50%;
    width: 0;
  }
  &:after {
    border-color: rgba($background-color, 0);
    border-left-color: $background-color;
    border-width: (2 * $arrow-width) $arrow-width;
    margin-top: -(2 * $arrow-width);
  }
  &:before {
    border-color: rgba($border-color, 0);
    border-left-color: $border-color;
    border-width: (2 * $arrow-width + 1px) ($arrow-width + 1px);
    margin-top: -(2 * $arrow-width + 1px);
  }
}

@mixin stage-container($background-color, $border-color, $name-color) {
  @extend .center;
  flex-basis: 0;
  flex-grow: 1; // margin: 10px;
  &:first-child {
    > * {
      border-radius: 2px 0 0 2px;
    }
  }
  &:last-child {
    > * {
      border-radius: 0 2px 2px 0;
    }
  }
  &:not(:first-child) {
    @include arrow-left($background-color, $border-color);
  }
  &:not(:last-child) {
    > * {
      @include arrow-right($background-color, $border-color);
    }
  }
  .box {
    @extend .center;
    background-color: $background-color;
    border: 1px solid $border-color;
    font-size: 12px;
    font-weight: bold;
    height: 34px;
    width: 100%;
    @if $name-color== 'transparent' {
      ion-icon {
        color: #ffffff;
      }
      .name {
        display: none;
      }
    } @else {
      ion-icon {
        display: none;
      }
      .name {
        color: $name-color;
        font-size: 12px;
        font-weight: bold;
      }
    }
  }
}

pipeline {
  display: flex;
  flex-wrap: nowrap;
  width: 100%;
  .item-container {
    cursor: pointer;
  }
  .view-all-container-initial,
  .stage-container-initial {
    @include stage-container(#ffffff, $color-border, #282828);
    &:hover {
      @include stage-container(#ffffff, $color-primary, #282828);
    }
  }
  .view-all-container-selected,
  .stage-container-selected {
    @include stage-container($color-primary, $color-primary, #ffffff);
  }
  .stage-container-completed {
    @include stage-container($color-primary, $color-primary, 'transparent');
  }
  .stage-container-active {
    @include stage-container(#ffffff, $color-primary, $color-primary);
  }
  .stage-container-future {
    @include stage-container(#ffffff, $color-border, #55656b);
  }
}
